@{
    ViewBag.Title = "Home Page";
}


<!DOCTYPE html>
<html>
<head>
    <title>Place Autocomplete</title>

    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">

    <style>
        html, body {
            height: 100%;
            margin: 30px;
            padding: 0;
        }

        #map {
            height: 100%;
        }

        .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
        }

            #pac-input:focus {
                border-color: #4d90fe;
            }

        .pac-container {
            font-family: Roboto;
        }

        #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

            #type-selector label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
            }
    </style>
</head>
<body>
    <div class="row">
        <div class="col-md-10">
            <input id="pac-input" class="controls" type="text"
                   placeholder="Enter a location">
            <div id="type-selector" class="controls">
                <input type="radio" name="type" id="changetype-all" checked="checked">
                <label for="changetype-all">All</label>

                <input type="radio" name="type" id="changetype-establishment">
                <label for="changetype-establishment">Establishments</label>

                <input type="radio" name="type" id="changetype-address">
                <label for="changetype-address">Addresses</label>

                <input type="radio" name="type" id="changetype-geocode">
                <label for="changetype-geocode">Geocodes</label>
            </div>

            <div style="height:500px;width:80%;" id="map"></div>
        </div>
        <div class="col-md-2">
            <table class="table table-striped">
                <tr id="CityNameShow">
                    <th>City Name</th>
                    <td id="City_Name"></td>
                </tr>
                <tr id="CityCodeShow">
                    <th>City Code</th>
                    <td id="CityCode"></td>
                </tr>
                <tr id="StateNameShow">
                    <th>State Name</th>
                    <td id="State_Name"></td>
                </tr>
                <tr id="StateCodeShow">
                    <th>State Code</th>
                    <td id="StateCode"></td>
                </tr>
                <tr id="CountryNameShow">
                    <th>Country Name</th>
                    <td id="CountryName"></td>
                </tr>
                <tr id="CountryCodeShow">
                    <th>Country Code</th>
                    <td id="CountryCode"></td>
                </tr>
            </table>




        </div>
    </div>
    <script>

        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -33.8688, lng: 151.2195 },
                zoom: 13
            });
            document.getElementById("CityNameShow").style.display = 'none';
            document.getElementById("CityCodeShow").style.display = 'none';
            document.getElementById("StateNameShow").style.display = 'none';
            document.getElementById("StateCodeShow").style.display = 'none';
            document.getElementById("CountryNameShow").style.display = 'none';
            document.getElementById("CountryCodeShow").style.display = 'none';
            var input = (
                document.getElementById('pac-input'));

            var types = document.getElementById('type-selector');
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }
                //Set Table Values
                for (var i = 0; i < place.address_components.length; i += 1) {
                    var addressObj = place.address_components[i];
                    for (var j = 0; j < addressObj.types.length; j += 1) {
                        if (addressObj.types[j] === 'country') {
                            $('#CountryName').text(addressObj.long_name);
                            $("#CountryCode").text(addressObj.short_name);
                            $("#CountryNameShow").show();
                            $("#CountryCodeShow").show();

                        }
                        if (addressObj.types[j] == "administrative_area_level_1") {
                            $('#State_Name').text(addressObj.long_name);
                            $("#StateCode").text(addressObj.short_name);
                            $("#StateNameShow").show();
                            $("#StateCodeShow").show();
                        }
                        else if (addressObj.types[j] === "administrative_area_level_2") {
                            $('#State_Name').text(addressObj.long_name);
                            $("#StateCode").text(addressObj.short_name);
                            $("#StateNameShow").show();
                            $("#StateCodeShow").show();
                        }
                        else if (addressObj.types[j] === "administrative_area_level_3") {
                            $('#State_Name').text(addressObj.long_name);
                            $("#StateCode").text(addressObj.short_name);
                            $("#StateNameShow").show();
                            $("#StateCodeShow").show();
                        }
                        else if (addressObj.types[j] === "administrative_area_level_4") {
                            $('#State_Name').text(addressObj.long_name);
                            $("#StateCode").text(addressObj.short_name);
                            $("#StateNameShow").show();
                            $("#StateCodeShow").show();
                        }
                        else if (addressObj.types[j] === "administrative_area_level_5") {
                            $('#State_Name').text(addressObj.long_name);
                            $("#StateCode").text(addressObj.short_name);
                            $("#StateNameShow").show();
                            $("#StateCodeShow").show();
                        }
                        if (addressObj.types[j] === "locality") {
                            $("#City_Name").text(addressObj.long_name);
                            $("#CityCode").text(addressObj.short_name);
                            $('#CityNameShow').show();
                            $("#CityCodeShow").show();
                        }
                        else if (addressObj.types[j] === "sublocality") {
                            $("#City_Name").text(addressObj.long_name);
                            $("#CityCode").text(addressObj.short_name);
                            $('#CityNameShow').show();
                            $("#CityCodeShow").show();
                        }
                        else if (addressObj.types[j] === "sublocality_level_1") {
                            $("#City_Name").text(addressObj.long_name);
                            $("#CityCode").text(addressObj.short_name);
                            $('#CityNameShow').show();
                            $("#CityCodeShow").show();
                        }
                        else if (addressObj.types[j] === "sublocality_level_2") {
                            $("#City_Name").text(addressObj.long_name);
                            $("#CityCode").text(addressObj.short_name);
                            $('#CityNameShow').show();
                            $("#CityCodeShow").show();
                        }
                        else if (addressObj.types[j] === "sublocality_level_3") {
                            $("#City_Name").text(addressObj.long_name);
                            $("#CityCode").text(addressObj.short_name);
                            $('#CityNameShow').show();
                            $("#CityCodeShow").show();
                        }
                        else if (addressObj.types[j] === "sublocality_level_4") {
                            $("#City_Name").text(addressObj.long_name);
                            $("#CityCode").text(addressObj.short_name);
                            $('#CityNameShow').show();
                            $("#CityCodeShow").show();
                        }
                        else if (addressObj.types[j] === "sublocality_level_5") {
                            $("#City_Name").text(addressObj.long_name);
                            $("#CityCode").text(addressObj.short_name);
                            $('#CityNameShow').show();
                            $("#CityCodeShow").show();
                        }
                    }
                }



                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }

                var icon = 'https://localhost:44329/marker.png';
                marker.setIcon(({
                    url: icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35),
                }));

                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),
                        (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }
                var circle = new google.maps.Circle({
                    map: map,
                    radius: 1609,    // 5 miles in metres
                    strokeColor: '#589ad0',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#589ad0',
                    fillOpacity: 0.35,

                });
                circle.bindTo('center', marker, 'position');

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);
            });


            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            function setupClickListener(id, types) {
                var radioButton = document.getElementById(id);
                radioButton.addEventListener('click', function () {
                    autocomplete.setTypes(types);
                });
            }

            setupClickListener('changetype-all', []);
            setupClickListener('changetype-address', ['address']);
            setupClickListener('changetype-establishment', ['establishment']);
            setupClickListener('changetype-geocode', ['geocode']);
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB_Nf14z1ILAFOP3aev5j2XQ8s_awfaN7E&libraries=places&callback=initMap"
            async defer></script>


</body>
</html>

